/// Signifies a placeholder variable which is later converted into an actual value.
/// These placeholders are necessary to handle constructs such as recirculation or cloning.
class Placeholder : Expression {
#noconstructor
#nooperator<

    /// The label of the placeholder.
    cstring label;

    /// The default value of the placeholder.
    Expression defaultValue;

    /// A symbolic variable always has a default value, and no source info.
    Placeholder(cstring label, Expression defaultValue) : Expression(defaultValue->type), label(label), defaultValue(defaultValue) {}

    /// Implements comparisons so that Placeholders can be used as map keys.
    operator< {
        if (static_cast<const Node *>(this) == &a_) return false;
        if (node_type_name() != a_.node_type_name()) return node_type_name() < a_.node_type_name();
        auto &a = static_cast<const SymbolicVariable &>(a_);
        return label < a.label;  /* ignore type and default value */
    }

    toString { return "@" + label +"(" + type->toString() + ")@"; }

    dbprint { out << "@" + label +"(" << type << ")@"; }
}
